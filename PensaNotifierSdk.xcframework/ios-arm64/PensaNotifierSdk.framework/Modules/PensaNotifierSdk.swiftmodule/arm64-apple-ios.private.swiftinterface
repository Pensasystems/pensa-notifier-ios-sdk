// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target arm64-apple-ios15.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name PensaNotifierSdk
import Foundation
import ObjectiveC
@_exported import PensaNotifierSdk
import SQLite3
import Swift
import UIKit
import UserNotifications
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import ObjectiveC.runtime
@_hasMissingDesignatedInitializers public class SwizzleUtils {
  public static func exchange(_ sourceClass: Swift.AnyClass?, _ sourceSelector: ObjectiveC.Selector, _ targetSelector: ObjectiveC.Selector)
  @objc deinit
}
extension UIKit.UIApplication {
  @_Concurrency.MainActor @preconcurrency public static func installPushTokenHooks()
}
extension UserNotifications.UNUserNotificationCenter {
  public static func swizzleDelegate()
}
public struct PensaNotifierError : Foundation.LocalizedError {
  public var errorDescription: Swift.String?
}
@objc @_inheritsConvenienceInitializers open class PensaNotificationServiceExtension : UserNotifications.UNNotificationServiceExtension {
  @objc override dynamic open func didReceive(_ request: UserNotifications.UNNotificationRequest, withContentHandler contentHandler: @escaping (UserNotifications.UNNotificationContent) -> Swift.Void)
  @objc override dynamic open func serviceExtensionTimeWillExpire()
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class PensaNotifier {
  public static func initialize(completion: ((Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void)? = nil)
  public static func requestPushNotificationAuthorization()
  public static func onNewPushToken(_ token: Foundation.Data)
  public static func onPushClicked(_ userInfo: [Swift.AnyHashable : Any])
  public static func onRemoteMessageReceived(_ userInfo: [Swift.AnyHashable : Any], completion: ((Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void)? = nil)
  public static func updateUser(userId: Swift.String, customAttributes: [Swift.String : Any]? = nil, completion: @escaping (Swift.Result<Swift.Bool, any Swift.Error>) -> Swift.Void = { _ in })
  @objc deinit
}
